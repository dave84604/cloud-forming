#!/usr/bin/env node
var aws = require('aws-sdk');
var s3 = new aws.S3();
var path = require('path');
var fs   = require('fs');
const args = require('yargs').argv;
const guid = require('uuid');
const jcf = require('./jcf');

var cwd = process.cwd();
var params = process.argv;
var defaultConfig = {
	name: "Unkown",
	s3 :
	{
	  root:guid.v4(),
	  storage: "data",
	  backup: "project-backups"
	},
	stacks:{},
	uploads:{}
};


console.log( `Initialising project in ${cwd}`);

if( !args.name)
{
  console.log( "i need a name");
  process.exit();
}
var projectDir = path.join(cwd, args.name);

defaultConfig.name = args.name;

//save the project config to the s3 bucket
var s3ProjectConf = path.join(defaultConfig.s3.root,'project.json');
var p = s3.headBucket({Bucket: jcf.s3.root}).promise();
p.then( function(data)
{
  console.log( "Root bucket exists");
  console.log(data);
  return s3.putObject(
	{
		Bucket:jcf.s3.root, 
		Key:s3ProjectConf, 
		Body:JSON.stringify(defaultConfig)
	}).promise();
})
.catch( function(err)
{
  console.log( "cant upload project config");
  console.log(err);
});

//save project config locally
fs.mkdirSync( projectDir,{recursive:true});
fs.writeFileSync( path.join(projectDir,'project.json'), JSON.stringify(defaultConfig,null,2));

//create default project structure
fs.mkdirSync( path.join(projectDir,'logs'),{recursive:true});
fs.mkdirSync( path.join(projectDir,'stacks'),{recursive:true});
fs.mkdirSync( path.join(projectDir,'data'),{recursive:true});
fs.mkdirSync( path.join(projectDir,'configs'),{recursive:true});
fs.mkdirSync( path.join(projectDir,'sql'),{recursive:true});
fs.mkdirSync( path.join(projectDir,'bakery'),{recursive:true});

